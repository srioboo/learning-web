{"version":3,"sources":["webpack:///src/components/src/components/CloudinaryUpload.vue","webpack:///src/src/App.vue"],"names":[],"mappings":"AA0KA,sBACA,YAAA,CAEA,kBAAA,CACA,wBAAA,CACA,uBAAA,CACA,eAAA,CACA,WACA,CACA,4BACA,eAAA,CACA,wBACA,CACA,6BACA,qBAAA,CACA,UAAA,CACA,aAAA,CACA,eAAA,CACA,YAAA,CACA,UAAA,CACA,QACA,CACA,mCACA,eAAA,CACA,UACA,CAEA,uBACA,wBACA,CAEA,uBACA,YAAA,CACA,mBACA,CACA,6BACA,sBACA,CAEA,yBACA,sBACA,+BAAA,CACA,aACA,CAEA,uBACA,gBAAA,CACA,eACA,CAEA,+CAEA,eACA,CACA,CAEA,wBACA,qBAAA,CACA,UAAA,CACA,eAAA,CACA,kBACA,CACA,8BACA,YACA,CACA,6EAEA,qBAAA,CACA,qBAAA,CACA,UACA,CACA,yBACA,aACA,CACA,qBACA,eAAA,CACA,WACA,CCpOA,KACA,6CAAA,CACA,kCAAA,CACA,iCAAA,CACA,iBAAA,CACA,aACA,CAEA,KACA,YAAA,CACA,kBAAA,CACA,WACA,CACA,UACA,UAAA,CACA,WACA","file":"app.5a770903.css","sourcesContent":["<template>\n  <div class=\"cl-upload\">\n    <!-- supply h2 heading -->\n    <h2>Upload an Image to Cloudinary</h2>\n    <div v-show=\"showProgress\">\n      <progress-bar :options=\"options\" :value=\"progress\" />\n    </div>\n\n    <!-- create a form that will not submit to a server but will prevent submit and\n    use the upload function as a handle-->\n    <form v-on:submit.prevent=\"upload\">\n      <!-- bind cloud-name to the input -->\n      <label for=\"cloudname-input\">Cloud Name:</label>\n      <input id=\"cloudname-input\" v-model=\"cloudName\" placeholder=\"Enter cloud_name from dashboard\" />\n      <!-- bind preset to the input -->\n      <label for=\"preset-input\">Preset:</label>\n      <input id=\"preset-input\" v-model=\"preset\" placeholder=\"Enter preset from upload settings\" />\n      <!-- allow the user to select an image file and when they have selected it call a function \n      to handle this event-->\n      <label for=\"file-input\">Upload:</label>\n      <input\n        id=\"file-input\"\n        type=\"file\"\n        accept=\"image/png, image/jpeg\"\n        @change=\"handleFileChange($event)\"\n      />\n      <!-- submit button is disabled until a file is selected -->\n      <button type=\"submit\" :disabled=\"filesSelected < 1\">Upload</button>\n    </form>\n\n    <!-- display uploaded image if successful -->\n    <section v-if=\"results && results.secure_url\">\n      <img :src=\"results.secure_url\" :alt=\"results.public_id\" />\n    </section>\n\n    <!-- display errors if not successful -->\n    <section>\n      <ul v-if=\"errors.length > 0\">\n        <li v-for=\"(error,index) in errors\" :key=\"index\">{{error}}</li>\n      </ul>\n    </section>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport ProgressBar from \"vuejs-progress-bar\";\nexport default {\n  name: \"CloudinaryUpload\",\n  components: {\n    ProgressBar\n  },\n  data() {\n    const progressBarOptions = {\n      text: {\n        shadowColor: \"black\",\n        fontSize: 14,\n        fontFamily: \"Helvetica\",\n        dynamicPosition: true\n      },\n      progress: {\n        color: \"#E8C401\",\n        backgroundColor: \"#000000\"\n      },\n      layout: {\n        height: 35,\n        width: 140,\n        type: \"line\",\n        progressPadding: 0,\n        verticalTextAlign: 63\n      }\n    };\n    return {\n      results: null,\n      errors: [],\n      file: null,\n      filesSelected: 0,\n      cloudName: \"\",\n      preset: \"\",\n      tags: \"browser-upload\",\n      progress: 0,\n      showProgress: false,\n      options: progressBarOptions,\n      fileContents: null,\n      formData: null\n    };\n  },\n  methods: {\n    // function to handle file info obtained from local\n    // file system and set the file state\n    handleFileChange: function(event) {\n      console.log(\"handlefilechange\", event.target.files);\n      //returns an array of files even though multiple not used\n      this.file = event.target.files[0];\n      this.filesSelected = event.target.files.length;\n    },\n    prepareFormData: function() {\n      this.formData = new FormData();\n      this.formData.append(\"upload_preset\", this.preset);\n      this.formData.append(\"tags\", this.tags); // Optional - add tag for image admin in Cloudinary\n      this.formData.append(\"file\", this.fileContents);\n    },\n    // function to handle form submit\n    upload: function() {\n      //no need to look at selected files if there is no cloudname or preset\n      if (this.preset.length < 1 || this.cloudName.length < 1) {\n        this.errors.push(\"You must enter a cloud name and preset to upload\");\n        return;\n      }\n      // clear errors\n      else {\n        this.errors = [];\n      }\n      console.log(\"upload\", this.file.name);\n\n      let reader = new FileReader();\n      // attach listener to be called when data from file\n      reader.addEventListener(\n        \"load\",\n        function() {\n          this.fileContents = reader.result;\n          this.prepareFormData();\n          let cloudinaryUploadURL = `https://api.cloudinary.com/v1_1/${this.cloudName}/upload`;\n          let requestObj = {\n            url: cloudinaryUploadURL,\n            method: \"POST\",\n            data: this.formData,\n            onUploadProgress: function(progressEvent) {\n              console.log(\"progress\", progressEvent);\n              this.progress = Math.round(\n                (progressEvent.loaded * 100.0) / progressEvent.total\n              );\n              console.log(this.progress);\n            //bind \"this\" to access vue state during callback\n            }.bind(this)\n          };\n          //show progress bar at beginning of post\n          this.showProgress = true;\n          axios(requestObj)\n            .then(response => {\n              this.results = response.data;\n              console.log(this.results);\n              console.log(\"public_id\", this.results.public_id);\n            })\n            .catch(error => {\n              this.errors.push(error);\n              console.log(this.error);\n            })\n            .finally(() => {\n              setTimeout(\n                function() {\n                  this.showProgress = false;\n                }.bind(this),\n                1000\n              );\n            });\n        }.bind(this),\n        false\n      );\n      // call for file read if there is a file\n      if (this.file && this.file.name) {\n        reader.readAsDataURL(this.file);\n      }\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nform {\n  display: grid;\n  padding: 1em;\n  background: #f9f9f9;\n  border: 1px solid #c1c1c1;\n  margin: 2rem auto 0 auto;\n  max-width: 500px;\n  padding: 1em;\n}\nform input {\n  background: #fff;\n  border: 1px solid #9c9c9c;\n}\nform button {\n  background-color: blue;\n  color: white;\n  font-size: 1em;\n  font-weight: bold;\n  padding: 0.7em;\n  width: 100%;\n  border: 0;\n}\nform button:hover {\n  background: gold;\n  color: black;\n}\n\nlabel {\n  padding: 0.5em 0.5em 0.5em 0;\n}\n\ninput {\n  padding: 0.7em;\n  margin-bottom: 0.5rem;\n}\ninput:focus {\n  outline: 3px solid gold;\n}\n\n@media (min-width: 400px) {\n  form {\n    grid-template-columns: 150px 1fr;\n    grid-gap: 16px;\n  }\n\n  label {\n    text-align: right;\n    grid-column: 1 / 2;\n  }\n\n  input,\n  button {\n    grid-column: 2 / 3;\n  }\n}\n\nbutton {\n  background-color: blue;\n  color: white;\n  font-weight: bold;\n  border-radius: 10px;\n}\nbutton:focus {\n  outline: none;\n}\nform button:disabled,\nform button[disabled] {\n  border: 1px solid #999999;\n  background-color: #cccccc;\n  color: #666666;\n}\nsection {\n  margin: 10px 0;\n}\nimg {\n  max-width: 300px;\n  height: auto;\n}\n</style>\n\n","<template>\n  <div id=\"app\">\n    <img class=\"vue-logo\" src=\"./assets/logo.png\" />\n    <cl-upload class=\"align\" />\n  </div>\n</template>\n\n<script>\nimport CloudinaryUpload from \"./components/CloudinaryUpload\";\n\nexport default {\n  name: \"App\",\n  components: {\n    \"cl-upload\": CloudinaryUpload\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\nbody {\n  display: grid;\n  place-items: center;\n  height: 80vh;\n}\n.vue-logo {\n  width: 50px;\n  height: auto;\n}\n</style>\n"]}